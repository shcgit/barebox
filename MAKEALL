#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-2.0-only

# Keep track of the number of builds and errors
nb_warnings=0
warnings_list=""
nb_errors=0
errors_list=""
test_errors_list=""
nb_defconfigs=0
nb_tests=0
nb_tests_failed=0
exitcode=0

time_start=$(date +%s)

filename=$(basename $0)

#-----------------------------------------------------------------------

usage() {
	echo "Usage: ${filename} [OPTION]..."
	echo "Barebox MAKEALL tools."
	echo ""
	echo "it's allow you to compile specific defconfig or ARCH or all"
	echo "as"
	echo ""
	echo "CROSS_COMPILE=arm-linux- ARCH=arm ./MAKEALL at91sam9263ek_defconfig"
	echo "CROSS_COMPILE=arm-linux- ARCH=arm ./MAKEALL"
	echo ""
	echo "The cross-compiler can be specify via"
	echo "    CROSS_COMPILE               default"
	echo "    CROSS_COMPILE_<arch>        arch default"
	echo "    CROSS_COMPILE_<target>      defconfig specific"
	echo ""
	echo "it will be evaluated in the invert order"
	echo ""
	echo "or via config"
	echo ""
	echo "you can specify it via env CONFIG or option -c (overwrite env)"
	echo ""
	echo "CONFIG=./MAKEALL.cfg ARCH=arm ./MAKEALL at91sam9263ek_defconfig"
	echo "CONFIG=./MAKEALL.cfg ARCH=arm ./MAKEALL"
	echo ""
	echo "and for all"
	echo ""
	echo "CONFIG=./MAKEALL.cfg ./MAKEALL"
	echo ""
	echo "you can specify via env or option"
	echo "env         option"
	echo "ARCH        -a      arch"
	echo "CONFIG      -c      config"
	echo "JOBS        -j      jobs"
	echo "BUILDDIR    -O      build dir"
	echo "LOGDIR      -l      log dir"
	echo "REGEX       -e      regex"
	echo "KCONFIG_ADD -k      kconfig fragment"
	echo "INCREMENTAL -i"
	echo ""
}

stats() {
	echo ""
	echo "--------------------- SUMMARY ----------------------------"
	echo "defconfigs compiled: ${nb_defconfigs}"
	if [ ${nb_errors} -gt 0 ] ; then
		echo -e "\tdefconfigs with errors:   ${nb_errors} (${errors_list} )"
	fi
	if [ ${nb_warnings} -gt 0 ] ; then
		echo -e "\tdefconfigs with warnings: ${nb_warnings} (${warnings_list} )"
	fi
	if [ ${nb_tests} -gt 0 ]; then
		echo "defconfigs tested:   ${nb_tests}"
		if [ "${nb_tests_failed}" -gt 0 ]; then
			echo -e "\tdefconfigs with errors:   ${nb_tests_failed} (${test_errors_list} )"
		fi
	fi
	time_stop=$(date +%s)
	time_diff=$((${time_stop} - ${time_start}))
	printf "Total time spent: %4is\n" ${time_diff}
	echo "----------------------------------------------------------"

	exit ${exitcode}
}

check_pipe_status() {
	for i in "${PIPESTATUS[@]}"
	do
		[ $i -gt 0 ] && return 1
	done
	return 0
}

do_build_target() {
	local arch=$1
	local target=$2
	local target_time_start=$(date +%s)
	local log_report="${LOGDIR}/${target}/report.log"
	local log_err="${LOGDIR}/${target}/errors.log"
	local err=0

	[ "$INCREMENTAL" != "1" ] && rm -rf "${BUILDDIR}"
	mkdir -p "${LOGDIR}/${target}"

	MAKE="make -j${JOBS} ARCH=${arch} O=${BUILDDIR}"
	${MAKE} ${target} &>/dev/null

	if [ ${arch} = "arm" ]; then
		grep -q "CONFIG_ARM64=y" ${BUILDDIR}/.config
		if [ $? = 0 ]; then
			arch=arm64
		fi
	fi

	tmp=$(echo "${target}" | tr - _)

	cross_compile=$(eval echo '$CROSS_COMPILE_'${tmp})
	cross_compile_set=$(eval echo '${CROSS_COMPILE_'${tmp}'+set}')
	if [ "${cross_compile_set}" = "" ]
	then
		cross_compile=$(eval echo '$CROSS_COMPILE_'${arch})
		cross_compile_set=$(eval echo '${CROSS_COMPILE_'${arch}'+set}')
		if [ "${cross_compile_set}" = "" ]
		then
			cross_compile=${CROSS_COMPILE}
		fi
	fi

	printf "Building ${arch} ${target} \n" >&2 | tee -a "${log_report}"
	MAKE="${MAKE} CROSS_COMPILE=${cross_compile}"
	${MAKE} ${target} 2>&1 > "${log_report}" | tee "${log_err}"
	for i in ${KCONFIG_ADD}; do
		./scripts/kconfig/merge_config.sh -m -O \
			${BUILDDIR} ${BUILDDIR}/.config $i \
			2>&1 > "${log_report}" | tee "${log_err}"
	done
	${MAKE} olddefconfig 2>&1 > "${log_report}" | tee "${log_err}"

	check_pipe_status
	configure_result="$?"

	printf "Configure: " | tee -a "${log_report}"

	if [ "$configure_result" = "0" ]; then
		printf "OK     \n" | tee -a "${log_report}"

		${MAKE} -s 2>&1 >> "${log_report}" | tee -a "${log_err}"

		check_pipe_status
		compile_result="$?"

		printf "Compile: " ${target} | tee -a "${log_report}"

		if [ "$compile_result" = "0" ]; then
			printf "OK     \n" | tee -a "${log_report}"
		else
			printf "FAILED \n" | tee -a "${log_report}"
			nb_errors=$((nb_errors + 1))
			errors_list="${errors_list} ${target}"
			err=1
			exitcode=1
		fi
	else
		printf "FAILED \n" | tee -a "${log_report}"
		printf "Compile: ------ \n" | tee -a "${log_report}"
		err=1
		exitcode=1
	fi

	if [ -s "${log_err}" ] ; then
		nb_warnings=$((nb_warnings + 1))
		warnings_list="${warnings_list} ${target}"
	else
		rm "${log_err}"
	fi

	nb_defconfigs=$((nb_defconfigs + 1))

	target_time_stop=$(date +%s)
	target_time_diff=$((${target_time_stop} - ${target_time_start}))
	printf "Compiled in %4is\n" ${target_time_diff} | tee -a "${log_report}"

	return $err
}

if command -v labgrid-pytest >/dev/null; then
	alias pytest=labgrid-pytest
fi

do_test_target() {
	local yaml=$1
	local target=$2
	shift 2
	local target_time_start=$(date +%s)
	local log_report="${LOGDIR}/${target}/report.log"
	local err=0

	LG_BUILDDIR=$BUILDDIR pytest --lg-env $yaml "$@" 2>&1 >> "${log_report}"

	check_pipe_status
	compile_result="$?"

	printf "Test: " ${yaml} | tee -a "${log_report}"

	if [ "$compile_result" = "0" ]; then
		printf "OK     \n" | tee -a "${log_report}"
	else
		printf "FAILED \n" | tee -a "${log_report}"
		nb_tests_failed=$((nb_tests_failed + 1))
		test_errors_list="${test_errors_list} ${yaml}"
		exitcode=1
		err=1
	fi

	nb_tests=$((nb_tests + 1))

	target_time_stop=$(date +%s)
	target_time_diff=$((${target_time_stop} - ${target_time_start}))
	printf "Tested in %4is\n" ${target_time_diff} | tee -a "${log_report}"

	return $err
}

do_build() {
	local arch=$1
	local regex=$2

	configs=$(find arch/${arch}/configs -name "${regex}_defconfig" | sort)
	for i in ${configs}; do
		local target=$(basename $i)

		do_build_target ${arch} ${target}
	done
}

do_build_all() {
	local build_target=0

	for i in arch/*
	do
		local arch=$(basename $i)

		if [ -d $i ]
		then
			do_build ${arch} "*"
			build_target=$((build_target + 1))
		fi
	done

	return $build_target
}

while getopts "hc:j:O:l:a:e:k:i" Option
do
case $Option in
	a )
		ARCH=${OPTARG}
		;;
	c )
		CONFIG=${OPTARG}
		;;
	j )
		JOBS=${OPTARG}
		;;
	l )
		LOGDIR=${OPTARG}
		;;
	O )
		BUILDDIR=${OPTARG}
		;;
	e )
		REGEX=${OPTARG}
		;;
	k )
		KCONFIG_ADD="${KCONFIG_ADD} ${OPTARG}"
		;;
	i )
		INCREMENTAL=1
		;;
	h )
		usage
		exit 0
		;;
esac
done

shift $((OPTIND - 1))

if [ ! "${JOBS}" ] ; then
	#linux, BSD, MacOS
	nb_cpu=`getconf _NPROCESSORS_ONLN`

	if [ $? -gt 0 ]
	then
		nb_cpu=1
	fi

	JOBS=$((${nb_cpu} * 2))
fi

if [ ! "${LOGDIR}" ]
then
	LOGDIR="log"
fi

if [ ! "${BUILDDIR}" ]
then
	BUILDDIR="makeall_builddir"
fi

if [ "${CONFIG}" ]
then
	basedir=$(dirname ${CONFIG})

	if [ ! "${basedir}" ] || [ "${basedir}" = "." ]
	then
		CONFIG="./${CONFIG}"
	fi

	. "${CONFIG}"
fi

[ -d "${LOGDIR}" ] || mkdir ${LOGDIR} || exit 1

if [ ! "${REGEX}" ]
then
	REGEX="*"
fi

if [ $# -eq 0 ]
then
	if [ ! "${ARCH}" ] || [ ! -d arch/${ARCH} ]
	then
		do_build_all
		if [ $? -eq 0 ]
		then
			echo "You need to specify the ARCH or CROSS_COMPILE_<arch> or CROSS_COMPILE_<target> in your config file"
			usage
			exit 1
		fi
		exit 0
	fi

	do_build ${ARCH} "${REGEX}"
else
	declare -a configs=()
	declare -a pytest_opts=()
	for i in $*; do
		if [[ "$i" = "-"* ]] || [ ${#pytest_opts[@]} -gt 0 ]; then
			pytest_opts+=($i)
			continue;
		fi

		skip=0

		# test/*/ may contain local symlinks, so resolve them
		for j in "${configs[@]}"; do
			if [ "$i" = "$j" ]; then
				skip=1
				break
			fi

			# drop duplicates, e.g. via globbing in directory with symlinks
			if [[ $i =~ / && $j =~ / &&
			   "$(readlink -f $i)" == "$(readlink -f $j)" ]]; then
				skip=1
				break
			fi
		done

		if [ $skip = 1 ]; then
			continue;
		fi

		configs+=($i)
	done
	for i in "${configs[@]}"; do
		config=$i
		if [[ $i =~ ^.*/([^/]+)/([^@]*@|)([^.]+).yaml$ ]]; then
			arch=${BASH_REMATCH[1]}
			defconfig=${BASH_REMATCH[3]}
			do_build_target $arch $defconfig
			if [ $? -eq 0 ]; then
				do_test_target $config $defconfig "${pytest_opts[@]}"
			else
				echo "Skipping test due to failed build"
			fi
		else
			do_build_target ${ARCH} $config
		fi
	done
fi

stats

exit ${nb_errors}
